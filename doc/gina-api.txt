*gina-api.txt*			API document of gina.vim for developer

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license

=============================================================================
API-CORE					*gina-api-core*

				*gina#core#get()*
gina#core#get([{options}])
	It returns a {git} instance of a current buffer or a specified
	buffer by "expr" attribute on {options}.

	It returns an empty dictionary if the buffer does not belongs to any
	git repository.

	The {git} instance is cached in "b:gina" until

	1. The bufname has not changed
	2. The 'buftype' has not changed
	3. Current working directory of the buffer has not changed

	When this function is called with 'verbose' option, extra information
	about cache are shown as debug information.

	Developers can control this cache behavior with "cache" attribute on
	{options} dictionary as

	"never"		It always search ".git"
	"truth"		Use cache when the buffer belongs to a git repository
	"always"	Use cache even when the buffer does not belogs to a
			git repository

	The default value of "cache" attribute is "always".

				*gina#core#get_or_fail()*
gina#core#get_or_fail({options})
	Similar to |gina#core#get()| but it throws an exception when no git
	repository is found.
	The exception is thrown by |gina#core#exception#warn()| so the
	exception is automatically catched and shown as |hl-WarningMsg| when
	this function is called by |gina#core#exception#call()|.

	While this function is used when a {git} instance is critical for an
	operation, a default value of "cache" attribute of {options} is
	"truth" instead of "always".

				*gina#core#buffer#params()*
gina#core#buffer#params({expr})
	Parse a pseudo buffer name and return a parameter dictionary.
	It returns an empty dictionary if the {expr} does not starts from
	"gina:".

	The parameter dictionary contains
	
	"repo"		A git repository name
	"scheme"	A command scheme (e.g. "show")
	"params"	A parameter list separated by ":"
	"revision"	A revision string of the object
	"path"		A relative path of the object 
>
	echo gina#core#buffer#params('gina:foobar:log')
	" {
        " 'repo': 'foo',
        " 'scheme': 'log',
        " 'params': [],
        " 'revision': '',
        " 'path': '',
	" }

	echo gina#core#buffer#params('gina:foobar:commit:amend')
	" {
        " 'repo': 'foo',
        " 'scheme': 'commit',
        " 'params': ['amend'],
        " 'revision': '',
        " 'path': '',
	" }

	echo gina#core#buffer#params('gina://foobar:show/HEAD:README.md')
	" {
        " 'repo': 'foo',
        " 'scheme': 'show',
        " 'params': [],
        " 'revision': 'HEAD',
        " 'path': 'README.md',
	" }
<
				*gina#core#buffer#open()*
gina#core#buffer#open({bufname} [, {options}])
	Open or focus a {bufname} with specified {options}.
	The following attributes are allowed in {options}.

	"mods"		A modifier string (e.g. "vertical", "botright")
	"group"		A group name. If there is a buffer which belongs to a
			same group, a new buffer is opened in that window
			instead of a new window.
	"opener"	A opener string like "edit" or "botright split"
 	"cmdarg"	A |cmdarg| used for "++enc" or "++ff"
 	"line"		A line number where the cursor should locate
 	"col"		A column number where the cursor should locate
 	"callback"	A callback dictionary which has
	    "fn"	A funcref which is called prior to |BufReadCmd|.
	    "args"	An argument list passed to "fn"

 	The "callback" attribute is used to pass a variable into the buffer
 	while

	1. Vim's autocmd cannot take attribute so it is difficult to know what
	   kind of attribute has passed to the command in |BufReadCmd|
	2. An opened buffer may not be focused while the buffer may be opened
	   in a |previewwindow|.

	So gina.vim use this callback to save a specified argument into a meta
	dictionary like (see autoload/gina/command/status.vim)
>
	function! gina#command#status#call(range, args, mods) abort
	  " ...
	  call gina#core#buffer#open(bufname, {
	        \ 'mods': a:mods,
	        \ 'group': args.params.group,
	        \ 'opener': args.params.opener,
	        \ 'cmdarg': args.params.cmdarg,
	        \ 'callback': {
	        \   'fn': function('s:init'),
	        \   'args': [args],
	        \ }
	        \})
	endfunction

	function! s:init(args) abort
	  call gina#core#meta#set('args', a:args)
	
	  " ...
	endfunction
<
				*gina#core#buffer#focus()*
gina#core#buffer#focus({expr})
	Focus a buffer specified by {expr} and return a guard instance to
	restore the focus.
	It returns |v:null| when no corresponding buffer of {expr} is
	available.
>
	let guard = gina#core#buffer#focus('foo')
	" A buffer "foo" is focused
	call guard.restore()
	" Focus is backed to the previous one
<
				*gina#core#buffer#assign_content()*
gina#core#buffer#assign_content({content})
	Assign {content} to the current buffer.
	It automatically detect an encoding and file-format from {content} by
	Vim's native feature (See |edit|) with 'lockmarks', 'keepjumps', and
	'keepalt'.

				*gina#core#buffer#extend_content()*
gina#core#buffer#assign_content({content})
	Extendh a content of the current buffer with {content}.
	It automatically detect an encoding and file-format from {content} by
	Vim's native feature (See |edit|) with 'lockmarks', 'keepjumps', and
	'keepalt'.

				*gina#core#emitter#emit()*
gina#core#emitter#emit({name} [, {arg}...])
	Emit a {name} event with specified arguments.
	Use |gina#core#emitter#subscribe()| to subscrite the event.

				*gina#core#emitter#subscribe()*
gina#core#emitter#subscribe({name}, {listener} [, {instance}])
	Subscribe a {name} event with {listener}.
	If an {instance} is specified, the {listener} funcref is called with
	that {instance}.

				*gina#core#emitter#unsubscribe()*
gina#core#emitter#unsubscribe({name}, {listener} [, {instance}])
	Unsubscribe a {name} event with {listener}.

				*gina#core#exception#info()*
gina#core#exception#info({msg})
	Return an exception message which will be handled by a default
	exception handler.
	The message is shown as an information message and |v:throwpoint|
	will be shown when |verbose| has specified.
	The message is assigned to |v:statusmsg| as well.

				*gina#core#exception#warn()*
gina#core#exception#warn({msg})
	Return an exception message which will be handled by a default
	exception handler.
	The message is shown as a warning message and |v:throwpoint|
	will be shown when |verbose| has specified.
	The message is assigned to |v:warningmsg| as well.

				*gina#core#exception#error()*
gina#core#exception#error({msg})
	Return an exception message which will be handled by a default
	exception handler.
	The message is shown as an error message and |v:throwpoint|
	will be shown when |verbose| has specified.
	The message is assigned to |v:errmsg| as well.

				*gina#core#exception#critical()*
gina#core#exception#critical({msg})
	Return an exception message which will be handled by a default
	exception handler.
	The message and |v:throwpoint| are shown as error messages.
	The message is assigned to |v:errmsg| as well.

				*gina#core#exception#call()*
gina#core#exception#call({funcref}, {args} [, {instance}])
	Similar to |call()| but exception occured in {funcref} will be handled
	by registered exception handlers.
	Use the following to create a special exception message to throw.

	|gina#core#exception#info()|
	|gina#core#exception#warn()|
	|gina#core#exception#error()|
	|gina#core#exception#critical()|

	Usage example:
>
	function! s:foo() abort
	  throw gina#core#exception#info('An information')
	endfunction

	call gina#core#exception#call(function('s:foo'), [])
	" -> "An information"
<
				*gina#core#meta#get()*
gina#core#meta#get({name} [, {default}])
	Return a value of a {name} entry in a meta dictionary of the current
	buffer. It returns {default} if no {name} is found.

				*gina#core#meta#get_or_fail()*
gina#core#meta#get_or_fail({name})
	Similar to |gina#core#meta#get()| but it throws an exception when
	there is no {name} found in a meta dictionary of the current buffer.

				*gina#core#meta#set()*
gina#core#meta#set({name}, {value})
	Set a value of a {name} entry in a meta dictionary of the current
	buffer to {value}.

				*gina#core#meta#has()*
gina#core#meta#has({name})
	Return 1 if {name} is found in a meta dictionary of the current
	buffer.

				*gina#core#meta#remove()*
gina#core#meta#remove({name})
	Remove a {name} entry in a meta dictionary of the current buffer.

				*gina#core#meta#clear()*
gina#core#meta#clear()
	Clear a meta dictionary of the current buffer.

				*gina#core#process#open()*
gina#core#process#open({git}, {args} [, {options}])
	A low-level API to execute a process.
	Start a new job process with {git} and {args} (Vital.Argument) and
	return a Vital.System.Job instance.
	Developers can confirm an exact argument by executing this function
	with |verbose|.
	The prefix of the actual argument is |g:gina#core#process#command|.

	See documents about Vital.System.Job (lambdalisue/vital-System-Job)
	and Vital.Argument (self-vital of gina.vim currently).

				*gina#core#process#call()*
gina#core#process#call({git}, {args} [, {options}])
	Similar to |gina#core#process#open()| but it wait until the process
	has terminate and return a result instance which has

	"args"		An actual argument used to start the process
	"status"	An exit status
	"stdout"	A stdout content list
	"stderr"	A stderr content list
	"content"	A mixture of stdout/stderr list

				*gina#core#process#exec()*
gina#core#process#exec({git}, {args})
	A high-level API to execute a process.

	With {args.params.async} = 0 (Default):
	It starts a process and wait until the process has terminate.
	After that, it assign a content into the current buffer and emit
	"command:called" event with the first positional argument (e.g.
	"show").
	It throws an error message by |gina#core#process#error()| when an exit
	status of the process is not 0.

	With {args.params.async} = 1:
	It starts a process and start update timer and return a job process.
	The update timer will be called every |g:gina#core#process#updatetime|
	milliseconds and update a buffer content with updated stdout of the
	process.
	It emit "command:called" with the first positional argument when the
	process has terminated.

				*gina#core#process#inform()*
gina#core#process#inform({result})
	Echo the {result.content}.
	It also shows {result.args} when the {result.status} is not 0.

				*gina#core#process#error()*
gina#core#process#error({result})
	It return an exception message of {result} built by
	|gina#core#exception#error()|.

				*gina#core#repo#expand()*
gina#core#repo#expand({expr})
	Expand {expr} based on a buffer name. It is used to get a
	corresponding existing filename of a pseudo buffer.
>
	echo gina#core#repo#expand('gina://foo:show/HEAD:README.md')
	" -> README.md

	edit gina://foo:show/HEAD:README.md
	echo gina#core#repo#expand('%')
	" -> README.md
<
				*gina#core#repo#abspath()*
gina#core#repo#abspath({git}, {path})
	It returns an absolute path of {path} of a git working-tree of {git}.
	If {git} is an empty dictionary, it returns an absolute path of a
	current working directory.

				*gina#core#repo#relpath()*
gina#core#repo#relpath({git}, {path})
	It returns a relative path of {path} from a git working-tree of {git}.
	If {git} is an empty dictionary, it returns a relative path from a
	current working directory.

				*gina#core#repo#objpath()*
gina#core#repo#objpath({git}, {path})
	It returns an unix-like style relative path of {path} from a git
	working-tree of {git} which is used for "object" in "git show" or
	other related command.

				*gina#core#repo#config()*
gina#core#repo#config({git})
	It returns a dictionary which represent a result of "git config" on a
	git working-tree of {git}.

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
