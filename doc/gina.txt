*gina.txt*				Control a git repository from Vim

Version: 0.1.0-dev
Author:  Alisue <lambdalisue@hashnote.net>
Support: Vim 8.0.0134 and above
Support: Neovim 0.1.7 and above
License: MIT license

=============================================================================
CONTENTS					*gina-contents*

Introduction			|gina-introduction|
Usage				|gina-usage|
Interface			|gina-interface|
  Commands			|gina-commands|
  Variables			|gina-variables|
  Mappings			|gina-mappings|
  Functions			|gina-functions|
  Options			|gina-options|
  Actions			|gina-actions|
  Events			|gina-events|
ASKPASS				|gina-askpass|


=============================================================================
INTRODUCTION					*gina-introduction*

*gina* is a git manipulation plugin which uses job feature of Neovim and Vim
to support async process call.


=============================================================================
USAGE						*gina-usage*


=============================================================================
INTERFACE					*gina-interface*

-----------------------------------------------------------------------------
COMMANDS					*gina-commands*

						*:Gina*
:Gina[!] {command} [{options}]
	Call {command} with {options}.
	It call a gina command of {command} when {command} is found under
	the namespace "gina#command#".
	Otherwise it call a raw {command} ("git {command} {options}") and
	echo the result. It immediately call a raw {command} rather than a
	gina command even if there are {command} is found if a bang (!) has
	specified.

						*:Gina-branch*
:Gina branch [{options}]
	Open a "gina-branch" buffer to list and manipulate branches.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	The following action groups are available in the buffer.

	|gina-action-branch|
	|gina-action-browse|
	|gina-action-changes|
	|gina-action-commit|
	|gina-action-show|

	See "man git-branch" for other available {options}.

						*:Gina-browse*
:Gina browse [{options}] [{commit}] [-- {path}]
	Show a remote content of {path} or the repository in a connected
	remote in a system browser (e.g. Firefox, Google Chrome, etc).
	If no {path} is specified, the path of the current buffer is used.
	If no {commit} has specified, the HEAD is used.
	The followings are allowed in {options}

	--scheme={scheme}
		Use a specified scheme to build a remote url.
	--exact
		Use an exact revision instead of a branch name
	--yank
		Yank a url instead of opening
	
	See
	|g:gina#command#browse#translation_patterns|
	|g:gina#command#browse#extra_translation_patterns|
	to find allowed {scheme} or available remote urls.

						*:Gina-cd*
:Gina cd [-- {path}]
	Change a current directory to the {path} or the repository root.
	See also |:Gina-lcd|.

						*:Gina-changes*
:Gina changes [{options}] [{commit}]
	Open a "gina-changes" buffer to show changed files of {commit}.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	It use "git diff --numstat" internally so see "man git-diff" for
	other available {options}.

	The following action groups are available in the buffer.
	
	|gina-action-browse|
	|gina-action-compare|
	|gina-action-diff|
	|gina-action-edit|
	|gina-action-show|

						*:Gina-chaperon*
:Gina chaperon [{options}]
	Open three buffers to solve conflicted changes during merge.
	NOTE: Not impelmented yet.

						*:Gina-commit*
:Gina commit [{options}]
	Open a "gina-commit" buffer to commit changes.
	The changes will be commited when the buffer has closed.

	The following buffer mapping is available

	<Plug>(gina-commit-toggle)
		Toggle "--amend" option. It is mapped to <C-^> in default.

						*:Gina-compare*
:Gina compare [{options}] [{commit}] [-- {path}]
	Open two buffers to compare the content of {path} between 1) working
	tree vs index or {commit}, 2) index vs HEAD or {commit}.
	If no {path} has specified, the path of the current buffer is used.
	If no {commit} has specified, the index or HEAD is used depends on
	the --cached option.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the 1st buffer (|gina-options-opener|)
	--line={line}
		An initial line number
	--col={col}
		An initial column number
	--cached
		Compare to the index rather than the working tree
	-R
		Reverse the buffer order.

	It respects 'diffopt' when opening the 2nd buffer. Add "vertical" to
	the option if you prefer to open the 2nd buffer vertically.

						*:Gina-diff*
:Gina diff [{options}] [{commit}] [-- {path}]
	Show an unified diff of {path} or the repository between 1) working
	tree vs index or {commit}, 2) index vs HEAD or {commit}.
	If no {path} has specified, the path of the current buffer is used.
	If no {commit} has specified, the index or HEAD is used depends on
	the --cached option.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)
	--repository
		Show a repository instead of the content of a specific file

	See "man git-diff" for other available {options}.

						*:Gina-edit*
:Gina edit [{options}] [-- {path}]
	Open a content of the {path} in the working tree.
	If no {path} has specified, the path of the current buffer is used.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)
	--line={line}
		An initial line number
	--col={col}
		An initial column number

	See "man git-diff" for other available {options}.

						*:Gina-grep*
:Gina grep [{options}]
	Open a "gina-grep" buffer to show files which match with the
	specified patterns.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)
	--async
		Run grep command asynchronously

	The following action groups are available in the buffer.

	|gina-action-browse|
	|gina-action-compare|
	|gina-action-diff|
	|gina-action-edit|
	|gina-action-export|
	|gina-action-patch|
	|gina-action-show|

	See "man git-grep" for other available {options}.
	See |:Gina-qrep| if you prefer to use |quickfix| window instead.

						*:Gina-info*
:Gina info [{options}] [{commit}] [-- {path}]
	Show an index or {commit} info.
	If no {commit} has specified, the index is used.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	See "man git-show" for other available {options}.
	See |:Gina-show| if you would like to see a content of a file in a
	particular commit.

						*:Gina-lcd*
:Gina lcd [-- {path}]
	Change a current directory to the {path} or the repository root.
	See also |:Gina-cd|.

						*:Gina-log*
:Gina log [{options}] [-- {path}]
	Open a "gina-log" buffer to show commits of the {paht} or the
	repository.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)
	--async
		Run grep command asynchronously

	The following action groups are available in the buffer.

	|gina-action-browse|
	|gina-action-changes|
	|gina-action-commit|
	|gina-action-compare|
	|gina-action-diff|
	|gina-action-edit|
	|gina-action-show|

	See "man git-log" for other available {options}.

						*:Gina-ls*
:Gina ls [{options}] [{commit}]
	List files in the working tree, the index, or the commit.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	The following action groups are available in the buffer.

	|gina-action-browse|
	|gina-action-compare|
	|gina-action-diff|
	|gina-action-edit|
	|gina-action-show|

	See "man git-ls-files" for other available {options}.
	See "man git-ls-tree" for other available {options}.

						*:Gina-patch*
:Gina patch [{options}] [-- {path}]
	Open three buffers to patch changes of {path} to the index.
	If no {path} has specified, the path of the current buffer is used.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the 1st buffer (|gina-options-opener|)
	--line={line}
		An initial line number
	--col={col}
		An initial column number

	It respects 'diffopt' when opening the 2nd, 3rd buffer. Add "vertical"
	to the option if you prefer to open the 2nd, 3rd buffer vertically.

						*:Gina-qrep*
:Gina qrep[!] [{options}]
	Like |:Gina-grep| but it uses |quickfix| window to show the result.
	
	It tries to mimic a Vim's builtin |:grep| command. So
	1. Use |:silent| if you would like to suppress the message
	2. Use a bang (!) if you don't want to focus the first candidate
	3. Use |QuickFixCmdPre| if you need some prior operation
	4. Use |QuickFixCmdPost| if you need some posterior operation (such as
	   an opening |quickfix| window)

	The followings are allowed in {options}

	--action={action}
		An action which is specified to |setqflist()|.

	See "man git-grep" for other available {options}.

						*:Gina-reflog*
:Gina reflog [{options}]
	Open a "gina-reflog" buffer to see reflog of the repository.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	The following action groups are available in the buffer.

	|gina-action-changes|
	|gina-action-commit|
	|gina-action-show|

	See "man git-reflog" for other available {options}.

						*:Gina-show*
:Gina show [{options}] [{commit}] [-- {path}]
	Open a {path} in index or {commit}.
	If no {path} has specified, the path of the current buffer is used.
	If no {commit} has specified, the index is used.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)
	--line={line}
		An initial line number
	--col={col}
		An initial column number

	See "man git-show" for other available {options}.
	See |:Gina-info| if you would like to see a commit itself.

						*:Gina-status*
:Gina status [{options}]
	Open a "gina-status" buffer to show status of the repository.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	The following action groups are available in the buffer.

	|gina-action-browse|
	|gina-action-compare|
	|gina-action-diff|
	|gina-action-edit|
	|gina-action-export|
	|gina-action-index|
	|gina-action-patch|
	|gina-action-show|

	See "man git-status" for other available {options}.

						*:Gina-tag*
:Gina tag [{options}]
	Open a "gina-tag" buffer to list tags.
	The followings are allowed in {options}

	--opener={opener}
		An opener command for the new buffer (|gina-options-opener|)

	The following action groups are available in the buffer.

	|gina-action-branch|
	|gina-action-browse|
	|gina-action-changes|
	|gina-action-commit|
	|gina-action-show|

	See "man git-tag" for other available {options}.

-----------------------------------------------------------------------------
VARIABLES					*gina-variables*

		*g:gina#command#browse#extra_translation_patterns*
g:gina#command#browse#extra_translation_patterns
	Add extra translation pattern for |:Gina-browse|.
	

-----------------------------------------------------------------------------
MAPPINGS					*gina-mappings*

The followings are builtin default mappings.

Mode	Key	Action~
n	?	builtin:help
nvi	<Tab>	builtin:choice
nvi	.	builtin:repeat

Users can find <Plug> mappings of individual actions in a message shown by
"builtin:help" action (hit ? in an action enabled buffer).
Then use |map| command in a corresponding |ftplugin| to define a custom mapping
like:
>
	" e.g. ~/.vim/ftplugin/gina-status.vim
	nmap <buffer> <Leader>t <Plug>(gina-edit-tabedit)
	nmap <buffer> <Leader>p <Plug>(gina-edit-preview)
<
-----------------------------------------------------------------------------
FUNCTIONS					*gina-functions*

					*gina#custom#action#alias()*
gina#custom#action#alias({scheme}, {alias}, {name})
	Add an {alias} of {name} action. Users can access the action with the
	{alias} in "builtin:choice" action.

-----------------------------------------------------------------------------
OPTIONS						*gina-options*

						*gina-options-opener*
--opener={opener}
	Specify an opener command for a new buffer. For example
>
	:Gina show --opener=vsplit
	:Gina show --opener="botright split"
<
	See |opening-window| for available values.

-----------------------------------------------------------------------------
ACTIONS						*gina-actions*

					*gina-action-builtin*
builtin:echo
	Echo the selected candidates.
	Note that this is a hidden action.
builtin:help
builtin:help:all
	Show available actions in the buffer.
	When ":all" has specified, all available actions including hidden
	actions are shown.
	The action is mapped to "?" in normal mode.
	Note that this is not a repeatalbe action.
builtin:choice
	Select an action to perform.
	The action is mapped to "<Tab>" in normal, visual, and insert mode.
	Note that this is not a repeatalbe action.
builtin:repeat
	Repeat a previous repeatable action.
	The action is mapped to "." in normal, visual, and insert mode.
	Note that this is not a repeatalbe action.

					*gina-action-branch*
branch:checkout
	Checkout a branch. It create a new local branch when a remote branch
	has specified.
branch:delete
branch:delete:force
	Delete a branch.
branch:move
branch:move:force
	Rename a branch.
branch:new
	Create a new branch
branch:refresh
	Fetch remote branches and remove unexisting remote branches
branch:set-upstream-to
	Set upstream of the branch
branch:unset-upstream
	Unset upstream of the branch

					*gina-action-browse*
browse
	Open a system browser of the url of remote of the content.
browse:exact
	Open a system browser of the url of remote of the content.
	A hashref is used to construct the url rather than branch.
browse:yank
	Yank the url of remote of the content.
browse:exact:yank
	Yank the url of remote of the content.
	A hashref is used to construct the url rather than branch.

					*gina-action-changes*
changes:of
	Show changes of the commit.
changes:between
	Show changes between the commit and HEAD.
changes:from
	Show changes from a common ancestor of the commit and HEAD.

					*gina-action-commit*
commit:merge
commit:merge:ff-only
commit:merge:no-ff
commit:merge:squash
	Merge the commit into HEAD
commit:rebase
	Rebase HEAD from the commit
commit:rebase:merge
	Rebase HEAD by merging the commit
commit:revert
commit:revert:1
commit:revert:2
	Revert the commit (-m1/-m2)
commit:cherry-pick
commit:cherry-pick:1
commit:cherry-pick:2
	Cherry pick the commit (-m1/-m2)

					*gina-action-compare*
compare
compare:above
compare:below
compare:left
compare:right
compare:tab
	Open two buffer to compare

					*gina-action-diff*
diff
diff:above
diff:below
diff:left
diff:right
diff:tab
diff:preview
	Open a diff content.

					*gina-action-edit*
edit
edit:above
edit:below
edit:left
edit:right
edit:tab
edit:preview
	Edit a content in the working tree.

					*gina-action-export*
export:quickfix
	Replace quickfix list with the selected candidates.
export:quickfix:add
	Add selected candidates to the quickfix list.

					*gina-action-index*
index:add
index:add:force
index:add:intent-to-add
	Add changes to the index.
	Note that this is a hidden action.
index:rm
index:rm:force
index:rm:cached
	Remove the content from the index and working tree.
	Note that this is a hidden action.
index:reset
	Remove changes from the index
	Note that this is a hidden action.
index:stage
index:stage:force
	Stage changes to the index.
	It uses "index:add" and "index:rm" internally.
index:unstage
	Unstage changes to the index.
	It is an alias of "index:reset".
index:toggle
	Toggle stage/unstage of changes.
	It uses "index:stage" and "index:unstage" internally.
index:checkout
index:checkout:force
	Checkout the content.
index:checkout:ours
	Checkout our content during merge.
index:checkout:theirs
	Checkout their content during merge.
index:checkout:HEAD
index:checkout:HEAD:force
	Checkout the content in HEAD
index:checkout:origin/HEAD
index:checkout:origin/HEAD:force
	Checkout the content in origin/HEAD
index:discard
index:discard:force
	Discard the changes in working tree.
	If the file is tracked, the content is overwritten via the content in
	HEAD. If the file is untracked, the file is removed ()

					*gina-action-patch*
patch
patch:above
patch:below
patch:left
patch:right
patch:tab
	Open three buffers to patch changes to the index.
	Not implemented yet.

					*gina-action-show*
show
show:above
show:below
show:left
show:right
show:tab
show:preview
	Show a content in the index or the commit.


-----------------------------------------------------------------------------
EVENTS						*gina-events*

Gina will emit an event when something has happend.
The following events are used internally.

modified
	Emitted when a status of a git repository seems to be modified.
	This event is used to update the buffer content and caches internally.
	Users should NOT emit this event directly, use "modified:delay"
	instead.

modified:delay
	Used to squash sequential modified event into a single "modified"
	event.
	It emits "modified" event few milliseconds after the event emitted and
	ignore all previous "modified:delay" events emitted within that time.
	Users should NOT subscribe this event directly, use "modifihed"
	instead.

command:called {scheme}
	Emitted when a gina's command (|:Gina|) has called and the initial
	process has terminated.
	A listener will be called with {scheme} which indicate what command
	has called.
	Note that a command which requires an additional step (e.g. commit,
	patch) will emit this event when the command get ready and will emit
	"command:called:complete" after the actual command has terminated
	(e.g. A commit message was comitted. A patch was saved into an index)

command:called:raw {scheme}
	Emitted when a raw git command (|:Gina!|) has called and the process
	has terminated.
	A listener will be called with {scheme} which indicate what command
	has called.
	Note that it is NOT called for an internal process. It is called only
	for a command invoked by |:Gina!| or |:Gina| with missing command.

command:called:complete {scheme}
	Emitted when a gina's command which requires additional steps has
	complete (e.g. commit, patch).

For example, if users want to do something when a commit message has comitted,
use a combination of "command:called:raw" and "command:called:complete" like
>
	function! s:on_commit(scheme) abort
	  if a:scheme !=# 'commit'
            return
          endif
          " Do more useful thing
          echomsg "Committed!"
	endfunction

	" Subscribe 'command:called:raw' event for :Gina commit -m{message}
	" which invoke a git raw command internally
	call gina#core#emitter#subscribe(
	      \ 'command:called:raw',
	      \ function('s:on_commit')
	      \)
	" Subscribe 'command:called:complete' event for an actual commit
	" event which may invoked by closing gina-commit window
	call gina#core#emitter#subscribe(
	      \ 'command:called:complete',
	      \ function('s:on_commit')
	      \)
<
Another for example is already used in ftplugin/gina-grep.vim. If user want to
update a quickfix candidates with gina-grep candidates automatically, use
"command:called" event like:
>
	" NOTE: Already written in ftplugin/gina-grep.vim
	function! s:on_grep(scheme) abort
	  if a:scheme !=# 'grep'
	    return 
	  endif
	  " Find a corresponding buffer and focus
	  let focus = gina#core#buffer#focus(bufnr('gina://*:grep*'))
	  if empty(focus)
	    return
	  endif
	  " Export entire candidates into a quickfic and restore the focus
	  try
	    call gina#action#call('export:quickfix')
	  finally
	    call focus.restore()
	  endtry
	endfunction
<

=============================================================================
ASKPASS						*gina-askpass*

When git requires username or password (e.g. git pull on a repository linked
with https://), it use a program called "askpass".
While gina.vim execute a git command through a job feature, a terminal based
askpass program which git provides cannot be used.
To solve this issue, gina.vim try to use a GUI based askpass program instead.

-----------------------------------------------------------------------------
LINUX						*gina-askpass-linux*

There is a well known GUI based askpass program called "ssh-askpass-gnome".
Users should install the program and set the executable path to one of these

1. "$GIT_ASKPASS" environment variable
2. "core.askpass" with "git config --global core.askpass=..."
3. "$SSH_ASKPASS" environment variable

When no available askpass program could be detected from above, gina.vim use
an internal askpass script based on "zenity" when "zenity" is executable.
Otherwise a git command which requires username and/or password always fail.

In short, Linux users should do one of

- Install "ssh-askpass-gnome" and configure it properly
- Install "zenity"

To enable username and/or password interactive input.

See "scripts/askpass.zenity" if you would like to check what the script does.

-----------------------------------------------------------------------------
MAC						*gina-askpass-mac*

gina.vim provides an internal askpass script based on an AppleScript.
The script should be available on any Unix based Mac.

In short, Mac uses should do nothing to enable username and/or password
interactive input.

See "scripts/askpass.mac" if you would like to check what the script does.

-----------------------------------------------------------------------------
WINDOWS						*gina-askpass-windows*

Git has a built-in credential helper called "wincred" for Windows.
This credential helper use a GUI-based prompt so Windows user do not need to
worry about this unless they disabled that by configuration.

In short, use "git config --global credential.helper wincred" to use
"wincred" in your system.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
