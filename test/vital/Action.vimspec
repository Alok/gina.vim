Describe Action
  Before
    let Action = vital#gina#import('Action')
  End

  After
    %bwipeout!
  End

  Describe .attach([{candidates}])
    It returns an instance of Action
      let binder = Action.attach()
      Assert KeyExists(binder, 'define')
      Assert KeyExists(binder, 'alias')
      Assert KeyExists(binder, 'action')
      Assert KeyExists(binder, 'call')
    End

    It defines builtin actions
      let binder = Action.attach()
      Assert Equals(sort(keys(binder.actions)), sort([
            \ 'builtin:echo',
            \ 'builtin:help',
            \ 'builtin:help:all',
            \ 'builtin:choice',
            \ 'builtin:repeat',
            \]))
    End

    It defines default aliases
      let binder = Action.attach()
      Assert Equals(sort(keys(binder.aliases)), sort([
            \ 'echo',
            \ 'help',
            \ 'help:all',
            \]))
    End

    It defines default mappings
      call Action.attach()
      Assert Equals(mapcheck('?', 'n'), '<Plug>(action-builtin-help)')
      Assert Equals(mapcheck('<Tab>', 'n'), '<Plug>(action-builtin-choice)')
      Assert Equals(mapcheck('<Tab>', 'v'), '<Plug>(action-builtin-choice)')
      Assert Equals(mapcheck('<Tab>', 'i'), '<Plug>(action-builtin-choice)')
      Assert Equals(mapcheck('.', 'n'), '<Plug>(action-builtin-repeat)')
      Assert Equals(mapcheck('.', 'v'), '<Plug>(action-builtin-repeat)')
      Assert Equals(mapcheck('.', 'i'), '<Plug>(action-builtin-repeat)')
    End
  End

  Describe .get()
    It returns an attached Action instance
      let binder1 = Action.attach()
      let binder2 = Action.get()
      Assert Same(binder1, binder2)
    End
  End

End
