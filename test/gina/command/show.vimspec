scriptencoding utf8

Describe gina#command#show
  Before all
    let Path = vital#gina#import('System.Filepath')
    let File = vital#gina#import('System.File')
    let slit1 = Slit(tempname(), 1)
    call File.copy(
          \ Path.realpath('test/gina/_testdata/utf8-encoding.txt'),
          \ Path.join(slit1.worktree, 'utf8-encoding.txt'),
          \)
    call File.copy(
          \ Path.realpath('test/gina/_testdata/cp1250-encoding.txt'),
          \ Path.join(slit1.worktree, 'cp1250-encoding.txt'),
          \)
    call slit1.execute('add .')
    call slit1.execute('commit --quiet -am "First"')

    call slit1.write('A/foo.txt', [])
    call slit1.execute('add %s', slit1.path('A/foo.txt'))

    call slit1.write('A/foo.txt', ['1'])
    call slit1.execute('commit --quiet -am "Second"')

    call slit1.write('A/foo.txt', ['2'])
    call slit1.execute('commit --quiet -am "Third"')

    call slit1.write('A/foo.txt', ['3'])
    call slit1.execute('add %s', slit1.path('A/foo.txt'))

    call slit1.write('A/foo.txt', ['4'])
  End

  Before
    %bwipeout!
  End

  Describe Use cases
    It might be called without arguments
      execute 'edit' fnameescape(slit1.path('A/foo.txt'))
      GinaSync show
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:show/:A/foo.txt', slit1.refname))
      Assert Equals(getline(1, '$'), ['3'])
    End

    It might be called with HEAD
      execute 'edit' fnameescape(slit1.path('A/foo.txt'))
      GinaSync show HEAD
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:show/HEAD:A/foo.txt', slit1.refname))
      Assert Equals(getline(1, '$'), ['2'])
    End

    It might be called with HEAD~
      execute 'edit' fnameescape(slit1.path('A/foo.txt'))
      GinaSync show HEAD~
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:show/HEAD~:A/foo.txt', slit1.refname))
      Assert Equals(getline(1, '$'), ['1'])
    End

    It might be called with ++enc=utf-8
      execute 'edit' fnameescape(slit1.path('utf8-encoding.txt'))
      GinaSync show ++enc=utf-8
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:show/:utf8-encoding.txt', slit1.refname))
      Assert Equals(gina#core#meta#get('args').params.cmdarg, '++enc=utf-8 ')
      Assert Equals(&fileencoding, 'utf-8')
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ 'árvíztűrő tükörfúrógép',
            \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
            \])

      GinaSync show
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ 'árvíztűrő tükörfúrógép',
            \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
            \])

      GinaSync show ++enc=cp1250
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
           \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
            \])
    End

    It might be called with ++enc=cp1250
      execute 'edit' fnameescape(slit1.path('cp1250-encoding.txt'))
      GinaSync show ++enc=cp1250
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:show/:cp1250-encoding.txt', slit1.refname))
      Assert Equals(&fileencoding, 'cp1250')
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ 'árvíztűrő tükörfúrógép',
            \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
            \])

      GinaSync show
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ 'árvíztűrő tükörfúrógép',
            \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
            \])

      GinaSync show ++enc=utf-8
      Assert Equals(getline(1, '$'), [
            \ 'Unix EOL',
            \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
            \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
            \])
    End
  End
End
