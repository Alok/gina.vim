Describe gina#command#info
  Before all
    let Path = vital#gina#import('System.Filepath')
    let slit1 = Slit(tempname(), 1)
    call slit1.write('A/foo.txt', [])
    call slit1.execute('add %s', slit1.path('A/foo.txt'))

    call slit1.write('A/foo.txt', ['1'])
    call slit1.execute('commit --quiet -am "First"')

    call slit1.write('A/foo.txt', ['2'])
    call slit1.execute('commit --quiet -am "Second"')

    call slit1.write('A/foo.txt', ['3'])
    call slit1.execute('add %s', slit1.path('A/foo.txt'))

    call slit1.write('A/foo.txt', ['4'])
  End

  Before
    %bwipeout!
  End

  Describe Use cases
    It might be called without arguments
      execute 'edit' fnameescape(slit1.path('A/foo.txt'))
      GinaSync info
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:info/:A/foo.txt', slit1.refname))
      Assert Equals(getline(4, 7) + getline(9, '$'), [
            \ '',
            \ '    Second',
            \ '',
            \ 'diff --git a/A/foo.txt b/A/foo.txt',
            \ '--- a/A/foo.txt',
            \ '+++ b/A/foo.txt',
            \ '@@ -1 +1 @@',
            \ '-1',
            \ '+2',
            \])
    End

    It might be called with HEAD~
      execute 'edit' fnameescape(slit1.path('A/foo.txt'))
      GinaSync info HEAD~
      Assert Equals(winnr('$'), 1)
      " Focused buffer
      Assert Equals(bufname('%'), printf('gina://%s:info/HEAD~:A/foo.txt', slit1.refname))
      Assert Equals(getline(4, 6), [
            \ '',
            \ '    First',
            \ '',
            \])
    End
  End
End
