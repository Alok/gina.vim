Describe gina#command#commit
  Describe #cleanup_commitmsg({content}, {mode}, {comment})
    Before
      let SCISSOR = '------------------------ >8 ------------------------'
    End

    Context {mode} == 'default'
      Before
        let mode = 'default'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '',
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'strip'
      Before
        let mode = 'strip'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '',
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'whitespace'
      Before
        let mode = 'whitespace'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '# ' . SCISSOR,
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It DOES NOT strip commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '# A commentary',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '^ A commentary',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'scissors'
      Before
        let mode = 'scissors'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It strips content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End
  End
End
