Describe gina#command#commit
  Before all
    let Path = vital#gina#import('System.Filepath')
    let slit1 = Slit(tempname(), 1)
    call slit1.write('A/foo.txt', [])
    call slit1.write('B/foo.txt', [])
    call slit1.execute('add .')
    call slit1.execute('commit -m "First"')
    call slit1.write('C/foo.txt', [])
    call slit1.execute('add .')
  End

  Describe Use cases
    Before
      silent! windo bwipeout!
      execute 'edit' fnameescape(slit1.worktree)
    End

    It might be called without arguments
      GinaSync commit
      Assert Equals(winnr('$'), 2)
      Assert Equals(bufname('%'), printf('gina://%s:commit', slit1.refname))
      Assert Equals(getline(1, '$'), [
            \ '',
            \ '# Please enter the commit message for your changes. Lines starting',
            \ '# with ''#'' will be ignored, and an empty message aborts the commit.',
            \ '# On branch master',
            \ '# Changes to be committed:',
            \ "#\tnew file:   C/foo.txt",
            \ '#',
            \])
      " Commit commitmsg
      call setline(1, ['Test Message']) | wq
      Assert Equals(slit1.execute('log --pretty=format:%s'), [
            \ 'Test Message',
            \ 'First',
            \])
      " Reset
      call slit1.execute('reset --soft HEAD@{1}')
    End

    It might be called with --verbose
      GinaSync commit --verbose
      Assert Equals(winnr('$'), 2)
      Assert Equals(bufname('%'), printf('gina://%s:commit', slit1.refname))
      Assert Equals(getline(1, 10), [
            \ '',
            \ '# Please enter the commit message for your changes. Lines starting',
            \ '# with ''#'' will be ignored, and an empty message aborts the commit.',
            \ '# On branch master',
            \ '# Changes to be committed:',
            \ "#\tnew file:   C/foo.txt",
            \ '#',
            \ '# ------------------------ >8 ------------------------',
            \ '# Do not touch the line above.',
            \ '# Everything below will be removed.',
            \])
      " Commit commitmsg
      call setline(1, ['Test Message']) | wq
      Assert Equals(slit1.execute('log --pretty=format:%s'), [
            \ 'Test Message',
            \ 'First',
            \])
      " Reset
      call slit1.execute('reset --soft HEAD@{1}')
    End

    It might be called with --amend
      GinaSync commit --amend
      Assert Equals(winnr('$'), 2)
      Assert Equals(bufname('%'), printf('gina://%s:commit', slit1.refname))
      Assert Equals(getline(1, 4), [
            \ 'First',
            \ '',
            \ '# Please enter the commit message for your changes. Lines starting',
            \ '# with ''#'' will be ignored, and an empty message aborts the commit.',
            \])
      " Commit commitmsg
      call setline(1, ['Test Message']) | wq
      Assert Equals(slit1.execute('log --pretty=format:%s'), [
            \ 'Test Message',
            \])
      " Reset
      call slit1.execute('reset --soft HEAD@{1}')
    End

    It might be called with --message={message}
      GinaSync commit --message="Test Message"
      Assert Equals(winnr('$'), 1)
      Assert NotEquals(bufname('%'), printf('gina://%s:commit', slit1.refname))
      Assert Equals(slit1.execute('log --pretty=format:%s'), [
            \ 'Test Message',
            \ 'First',
            \])
      " Reset
      call slit1.execute('reset --soft HEAD@{1}')
    End
  End

  Describe #cleanup_commitmsg({content}, {mode}, {comment})
    Before
      let SCISSOR = '------------------------ >8 ------------------------'
    End

    Context {mode} == 'default'
      Before
        let mode = 'default'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '',
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'strip'
      Before
        let mode = 'strip'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '',
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'whitespace'
      Before
        let mode = 'whitespace'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It DOES NOT strip content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \ '# ' . SCISSOR,
              \ 'd',
              \ 'e',
              \ 'f',
              \])
      End

      It DOES NOT strip commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '# A commentary',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '^ A commentary',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End

    Context {mode} == 'scissors'
      Before
        let mode = 'scissors'
        let comment = '#'
      End

      It strips leading and trailing empty lines from {content}
        let content = ['', '', '', 'a', 'b', 'c', '', '', '']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips trailing whitespace from {content}
        let content = ['  a  ', 'b  ', '  c']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ '  a',
              \ 'b',
              \ '  c',
              \])
      End

      It strips content after a scissor
        let content = ['a', 'b', 'c', '# ' . SCISSOR, 'd', 'e', 'f']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ 'b',
              \ 'c',
              \])
      End

      It strips commentary from {content}
        let content = ['Not a commentary', '# A commentary', 'Not # a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'Not a commentary',
              \ '',
              \ 'Not # a commentary',
              \])

        let content = ['Not a commentary', '^ A commentary', 'Not ^ a commentary']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, '^'), [
              \ 'Not a commentary',
              \ '',
              \ 'Not ^ a commentary',
              \])
      End

      It collapse consecutiv empty lines
        let content = ['a', '', 'b', '', '', 'c', '', '', '', 'd']
        Assert Equals(gina#command#commit#cleanup_commitmsg(content, mode, comment), [
              \ 'a',
              \ '',
              \ 'b',
              \ '',
              \ 'c',
              \ '',
              \ 'd',
              \])
      End
    End
  End
End
