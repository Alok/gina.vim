Describe gina#core#treeish
  Before all
    let Argument = vital#gina#import('Argument')
  End

  Before
    let git = gina#core#get_or_fail()
  End

  Describe #extend({git}, {args}, {treeish})
    It extends {args.params} with {rev, path, treeish} dictionary
      let git = gina#core#get_or_fail()
      let args = Argument.new('show HEAD:README.md')
      let args.params = {}
      call gina#core#treeish#extend(git, args, args.pop(1))
      Assert Equals(args.params.rev, 'HEAD')
      Assert Equals(args.params.path, 'README.md')
      Assert Equals(args.params.treeish, 'HEAD:README.md')
    End
  End

  Describe #split({treeish})
    " NOTE:
    " The spec follows https://git-scm.com/docs/gitrevisions
    It splits <sha1> and returns [<rev>, v:null]
      let rev = 'dae86e1950b1277e545cee180551750029cfe735'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'dae86e'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <describeOutput> and return [<rev>, v:null]
      let rev = 'v1.7.4.2-679-g3bee7fb'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <refname> and return [<rev>, v:null]
      let rev = 'master'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'heads/master'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'refs/heads/master'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits @ and return [<rev>, v:null]
      let rev = '@'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <refname>@{<date>} and return [<rev>, v:null]
      let rev = 'master@{yesterday}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'HEAD@{5 minutes ago}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <refname>@{<n>} and return [<rev>, v:null]
      let rev = 'master@{1}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits @{<n>} and return [<rev>, v:null]
      let rev = '@{1}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits @{-<n>} and return [<rev>, v:null]
      let rev = '@{-1}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <branchname>@{upstream} and return [<rev>, v:null]
      let rev = 'master@{upstream}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = '@{u}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <branchname>@{push} and return [<rev>, v:null]
      let rev = 'master@{push}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = '@{push}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>^ and return [<rev>, v:null]
      let rev = 'HEAD^'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'v1.5.1^0'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>~<n> and return [<rev>, v:null]
      let rev = 'master~3'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>^{<type>} and return [<rev>, v:null]
      let rev = 'v0.99.8^{commit}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>^{} and return [<rev>, v:null]
      let rev = 'v0.99.8^{}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>^{/<text>} and return [<rev>, v:null]
      let rev = 'HEAD^{/fix nasty bug}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = 'HEAD^{/Warning: Something}'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits :/<text> and return [<rev>, v:null]
      let rev = ':/fix nasty bug'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])

      let rev = ':/Warning: Something'
      Assert Equals(gina#core#treeish#split(rev), [rev, v:null])
    End

    It splits <rev>:<path> and return [<rev>, v:null]
      let rev = 'HEAD:README'
      Assert Equals(gina#core#treeish#split(rev), ['HEAD', 'README'])

      let rev = ':README'
      Assert Equals(gina#core#treeish#split(rev), ['', 'README'])

      let rev = 'master:./README'
      Assert Equals(gina#core#treeish#split(rev), ['master', './README'])
    End

    It splits :<n>:<path> and return [<rev>, v:null]
      let rev = ':0:README'
      Assert Equals(gina#core#treeish#split(rev), [':0', 'README'])

      let rev = ':0'
      Assert Equals(gina#core#treeish#split(rev), [':0', ''])
    End
  End

  Describe #build({rev}, {path})
    It builds a treeish from {rev} and v:null and return {rev}
      let rev = 'master'
      Assert Equals(gina#core#treeish#build(rev, v:null), rev)
    End

    It builds a treeish from {rev} and {path} and return {rev}:{path}
      Assert Equals(gina#core#treeish#build('master', 'README'), 'master:README')
      Assert Equals(gina#core#treeish#build('', 'README'), ':README')
      Assert Equals(gina#core#treeish#build('master', ''), 'master:')
    End
  End

  Describe #sha1({git}, {rev})

    It returns <sha1> of 'HEAD'
      Assert Match(gina#core#treeish#sha1(git, 'HEAD'), '^\w\{40}$')
    End

    It returns <sha1> of 'heads/master'
      Assert Match(gina#core#treeish#sha1(git, 'heads/master'), '^\w\{40}$')
    End

    It returns <sha1> of 'HEAD@{2 lays ago}'
      Assert Match(gina#core#treeish#sha1(git, 'HEAD@{2 days ago}'), '^\w\{40}$')
      Assert Match(gina#core#treeish#sha1(git, 'HEAD@{2.days.ago}'), '^\w\{40}$')
    End
  End

  Describe #split_rev({git}, {rev})
    It splits 'HEAD' into ['HEAD', '']
      let revs = gina#core#treeish#split_rev(git, 'HEAD')
      Assert Equals(revs[0], 'HEAD')
      Assert Equals(revs[1], '')
    End

    It splits 'HEAD@{2.days.ago}' into ['HEAD@{2.days.ago}', '']
      let revs = gina#core#treeish#split_rev(git, 'HEAD@{2.days.ago}')
      Assert Equals(revs[0], 'HEAD@{2.days.ago}')
      Assert Equals(revs[1], '')
    End

    It splits 'HEAD..HEAD~' into ['HEAD', 'HEAD~']
      let revs = gina#core#treeish#split_rev(git, 'HEAD..HEAD~')
      Assert Equals(revs[0], 'HEAD')
      Assert Equals(revs[1], 'HEAD~')
    End

    It splits 'HEAD...HEAD~' into [<common ancestor>, 'HEAD~']
      let revs = gina#core#treeish#split_rev(git, 'HEAD...HEAD~')
      Assert Match(revs[0], '^\w\{40}$')
      Assert Equals(revs[1], 'HEAD~')
    End

    It splits '..' into ['HEAD', 'HEAD~']
      let revs = gina#core#treeish#split_rev(git, '..')
      Assert Equals(revs[0], 'HEAD')
      Assert Equals(revs[1], 'HEAD')
    End

    It splits '...' into [<sha1>, 'HEAD']
      let revs = gina#core#treeish#split_rev(git, '...')
      Assert Match(revs[0], '^\w\{40}$')
      Assert Equals(revs[1], 'HEAD')
    End
  End

  Describe #resolve_rev({git}, {rev})
    It resolves 'HEAD' into 'HEAD'
      let rev = gina#core#treeish#resolve_rev(git, 'HEAD')
      Assert Equals(rev, 'HEAD')
    End

    It resolves 'HEAD@{2.days.ago}' into ['HEAD@{2.days.ago}', '']
      let rev = gina#core#treeish#resolve_rev(git, 'HEAD@{2.days.ago}')
      Assert Equals(rev, 'HEAD@{2.days.ago}')
    End

    It resolves 'HEAD..HEAD~' into 'HEAD'
      let rev = gina#core#treeish#resolve_rev(git, 'HEAD..HEAD~')
      Assert Equals(rev, 'HEAD')
    End

    It resolves 'HEAD...HEAD~' into <common ancestor>
      let rev = gina#core#treeish#resolve_rev(git, 'HEAD...HEAD~')
      Assert Match(rev, '^\w\{40}$')
    End

    It resolves '..' into ''
      let rev = gina#core#treeish#resolve_rev(git, '..')
      Assert Equals(rev, '')
    End

    It resolves '...' into <sha1>
      let rev = gina#core#treeish#resolve_rev(git, '...')
      Assert Match(rev, '^\w\{40}$')
    End
  End
End
