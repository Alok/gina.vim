Describe gina#core#buffer
  Describe #params({expr})
    It returns an empty dictionary when {bufname} does not start from 'gina:'
      let params = gina#core#buffer#params('autoload/gina.vim')
      Assert Equals(params, {})
    End

    It returns a params dictionary for 'gina://gina.vim:status'
      let params = gina#core#buffer#params('gina://gina.vim:status')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'status')
      Assert Equals(params.params, [])
      Assert Equals(params.revision, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina://gina.vim:commit:amend'
      let params = gina#core#buffer#params('gina://gina.vim:commit:amend')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'commit')
      Assert Equals(params.params, ['amend'])
      Assert Equals(params.revision, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina://gina.vim:commit:ignore-submodule'
      let params = gina#core#buffer#params('gina://gina.vim:commit:amend:ignore-submodule')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'commit')
      Assert Equals(params.params, ['amend', 'ignore-submodule'])
      Assert Equals(params.revision, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina://gina.vim:show/HEAD:README.md'
      let params = gina#core#buffer#params('gina://gina.vim:show/HEAD:README.md')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.revision, 'HEAD')
      Assert Equals(params.path, 'README.md')
    End

    It returns a params dictionary for 'gina://gina.vim:show/:README.md'
      let params = gina#core#buffer#params('gina://gina.vim:show/:README.md')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.revision, '')
      Assert Equals(params.path, 'README.md')
    End

    It returns a params dictionary for 'gina://gina.vim:show/HEAD'
      let params = gina#core#buffer#params('gina://gina.vim:show/HEAD')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.revision, 'HEAD')
      Assert Equals(params.path, '')
    End
  End

  Describe #param({expr}, {attr} [, {default}])
    It throws an exception when unknown {attr} has specified
      Throws /Unknown attribute "foo" has specified/
            \ gina#core#buffer#param('autoload/gina.vim', 'foo')
    End

    It returns a {default} when {attr} is not found in a params of {expr}
      let expr = 'autoload/gina.vim'
      Assert Equals(gina#core#buffer#param(expr, 'repo'), '')
      Assert Equals(gina#core#buffer#param(expr, 'scheme'), '')
      Assert Equals(gina#core#buffer#param(expr, 'params'), [])
      Assert Equals(gina#core#buffer#param(expr, 'revision'), '')
      Assert Equals(gina#core#buffer#param(expr, 'path'), '')

      Assert Equals(gina#core#buffer#param(expr, 'repo', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'scheme', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'params', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'revision', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'path', 'foo'), 'foo')
    End

    It returns a {default} when {attr} in a params of {expr} is empty
      let expr = 'gina://gina.vim:status'
      Assert Equals(gina#core#buffer#param(expr, 'repo'), 'gina.vim')
      Assert Equals(gina#core#buffer#param(expr, 'scheme'), 'status')
      Assert Equals(gina#core#buffer#param(expr, 'params'), [])
      Assert Equals(gina#core#buffer#param(expr, 'revision'), '')
      Assert Equals(gina#core#buffer#param(expr, 'path'), '')

      Assert Equals(gina#core#buffer#param(expr, 'params', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'revision', 'foo'), 'foo')
      Assert Equals(gina#core#buffer#param(expr, 'path', 'foo'), 'foo')
    End

    It returns a value of {attr} in params of {expr}
      let expr = 'gina://gina.vim:diff:cached/HEAD:README.md'
      Assert Equals(gina#core#buffer#param(expr, 'repo'), 'gina.vim')
      Assert Equals(gina#core#buffer#param(expr, 'scheme'), 'diff')
      Assert Equals(gina#core#buffer#param(expr, 'params'), ['cached'])
      Assert Equals(gina#core#buffer#param(expr, 'revision'), 'HEAD')
      Assert Equals(gina#core#buffer#param(expr, 'path'), 'README.md')
    End
  End
End
