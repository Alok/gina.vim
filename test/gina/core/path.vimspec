Describe gina#core#path
  Before all
    let Path = vital#gina#import('System.Filepath')
    let root = tempname()
    let slit1 = Slit(Path.join(root, 'valid'), 1)
  End

  After all
    let File = vital#gina#import('System.File')
    call File.rmdir(root, 'r')
    call gina#core#clear()
  End

  Before
    windo bwipeout!
  End

  Describe #expand({expr})
    It returns a Unix-like path of {expr} when {expr} starts from ':'
      let expr = Path.realpath(':/foo/bar.txt')
      Assert Equals(gina#core#path#expand(expr), ':/foo/bar.txt')
    End

    It returns an Unix-like absolute path of {expr} when {expr} starts from 'gina://'
      let git = gina#core#get_or_fail({'expr': slit1.worktree})
      let expr = printf(
            \ 'gina://%s:show/:A/foo/bar.txt',
            \ fnamemodify(slit1.worktree, ':t')
            \)
      Assert Equals(gina#core#path#expand(expr), Path.unixpath(
            \ Path.join(git.worktree, 'A', 'foo', 'bar.txt')
            \))
    End

    It returns an expanded Unix-like path of {expr} when {expr} is '%'
      execute 'edit' Path.realpath('foo/bar.txt')
      let expr = '%'
      Assert Equals(gina#core#path#expand(expr), 'foo/bar.txt')

      let git = gina#core#get_or_fail({'expr': slit1.worktree})
      execute 'edit' fnameescape(printf(
            \ 'gina://%s:show/:A/foo/bar.txt',
            \ fnamemodify(slit1.worktree, ':t')
            \))
      let expr = '%'
      Assert Equals(gina#core#path#expand(expr), Path.unixpath(
            \ Path.join(git.worktree, 'A', 'foo', 'bar.txt')
            \))
    End

    It returns an expanded Unix-like path of {expr}
      let expr = '$HOME'
      Assert Equals(gina#core#path#expand(expr), Path.unixpath(expand('$HOME')))

      let expr = 'master'
      Assert Equals(gina#core#path#expand(expr), 'master')
    End
  End
End
