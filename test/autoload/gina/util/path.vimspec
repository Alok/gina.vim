Describe gina#util
  Before all
    let Path = vital#gina#import('System.Filepath')
  End

  Describe #params({expr})
    It returns an empty dictionary when {bufname} does not start from 'gina:'
      let params = gina#util#params('autoload/gina.vim')
      Assert Equals(params, {})
    End

    It returns a params dictionary for 'gina:gina.vim:status'
      let params = gina#util#params('gina:gina.vim:status')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'status')
      Assert Equals(params.params, [])
      Assert Equals(params.commit, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina:gina.vim:commit:amend'
      let params = gina#util#params('gina:gina.vim:commit:amend')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'commit')
      Assert Equals(params.params, ['amend'])
      Assert Equals(params.commit, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina:gina.vim:commit:ignore-submodule'
      let params = gina#util#params('gina:gina.vim:commit:amend:ignore-submodule')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'commit')
      Assert Equals(params.params, ['amend', 'ignore-submodule'])
      Assert Equals(params.commit, '')
      Assert Equals(params.path, '')
    End

    It returns a params dictionary for 'gina:gina.vim:show/HEAD:README.md'
      let params = gina#util#params('gina:gina.vim:show/HEAD:README.md')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.commit, 'HEAD')
      Assert Equals(params.path, 'README.md')
    End

    It returns a params dictionary for 'gina:gina.vim:show/:README.md'
      let params = gina#util#params('gina:gina.vim:show/:README.md')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.commit, '')
      Assert Equals(params.path, 'README.md')
    End

    It returns a params dictionary for 'gina:gina.vim:show/HEAD'
      let params = gina#util#params('gina:gina.vim:show/HEAD')
      Assert Equals(params.repo, 'gina.vim')
      Assert Equals(params.scheme, 'show')
      Assert Equals(params.params, [])
      Assert Equals(params.commit, 'HEAD')
      Assert Equals(params.path, '')
    End
  End

  Describe #expand()
    It returns an empty string for an empty {expr}
      let actual = gina#util#expand('')
      let expect = ''
      Assert Equals(actual, expect)
    End

    It returns a path when {expr} is a path
      let actual = gina#util#expand('autoload/gina.vim')
      let expect = Path.realpath('autoload/gina.vim')
      Assert Equals(actual, expect)
    End

    It returns an expanded path of current buffer when {expr} is '%'
      execute 'edit foobar'
      let actual = gina#util#expand('%')
      let expect = 'foobar'
      Assert Equals(actual, expect)
    End

    It returns a path of current buffer when {expr} is 'gina:...'
      execute 'edit gina:gina.vim:show/HEAD:README.md'
      let actual = gina#util#expand('%')
      let expect = 'README.md'
      Assert Equals(actual, expect)
    End
  End
End
