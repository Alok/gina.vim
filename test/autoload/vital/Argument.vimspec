Describe Argument
  Before all
    let Path = vital#gina#import('System.Filepath')
  End

  Before
    let Argument = vital#gina#import('Argument')
  End

  Describe .new()
    It returns an args instance
      let args = Argument.new()
      Assert KeyExists(args, 'raw')
      Assert KeyExists(args, 'list')
      Assert KeyExists(args, 'search')
      Assert KeyExists(args, 'get')
      Assert KeyExists(args, 'set')
      Assert KeyExists(args, 'pop')
      Assert KeyExists(args, 'map')
      Assert KeyExists(args, 'apply')
      Assert KeyExists(args, 'list_p')
      Assert KeyExists(args, 'search_p')
      Assert KeyExists(args, 'get_p')
      Assert KeyExists(args, 'set_p')
      Assert KeyExists(args, 'pop_p')
      Assert KeyExists(args, 'map_p')
      Assert KeyExists(args, 'apply_p')
      Assert IsList(args.raw)
      Assert IsFunction(args.list)
      Assert IsFunction(args.search)
      Assert IsFunction(args.get)
      Assert IsFunction(args.set)
      Assert IsFunction(args.pop)
      Assert IsFunction(args.map)
      Assert IsFunction(args.apply)
      Assert IsFunction(args.list_p)
      Assert IsFunction(args.search_p)
      Assert IsFunction(args.get_p)
      Assert IsFunction(args.set_p)
      Assert IsFunction(args.pop_p)
      Assert IsFunction(args.map_p)
      Assert IsFunction(args.apply_p)
    End

    It returns an args instance with {init} list
      let args = Argument.new(['--foo', '--bar=bar', '--hoge="h o g e"'])
      Assert Equals(args.raw, ['--foo', '--bar=bar', '--hoge="h o g e"'])
    End

    It returns an args instance for {init} string
      let args = Argument.new('--foo --bar=bar --hoge="h o g e"')
      Assert Equals(args.raw, ['--foo', '--bar=bar', '--hoge=h o g e'])
    End
  End

  Describe .parse()
    It splits string in a command argument manner
      Assert Equals(Argument.parse('foo'), ['foo'])
      Assert Equals(Argument.parse('foo bar'), ['foo', 'bar'])
      Assert Equals(Argument.parse('"foo foo" "bar bar"'), ['foo foo', 'bar bar'])
      Assert Equals(Argument.parse("'foo foo' 'bar bar'"), ['foo foo', 'bar bar'])
      Assert Equals(Argument.parse('foo "bar bar" hoge'), ['foo', 'bar bar', 'hoge'])
      Assert Equals(Argument.parse("foo 'bar bar' hoge"), ['foo', 'bar bar', 'hoge'])
      Assert Equals(Argument.parse('--foo="foo" -b"bar"'), ['--foo=foo', '-bbar'])
      Assert Equals(Argument.parse('--foo=''foo'' -b''bar'''), ['--foo=foo', '-bbar'])
      Assert Equals(Argument.parse('foo\ bar\ hoge'), ['foo\ bar\ hoge'])
    End
  End

  Describe .build_pattern()
    It returns a corresponding pattern for {query}
      Assert Equals(Argument.build_pattern('--foobar'), '^\%(--foobar\>\)')
      Assert Equals(Argument.build_pattern('-f'), '^\%(-f\)')
      Assert Equals(Argument.build_pattern('-f|--foobar'), '^\%(-f\|--foobar\>\)')
      Assert Equals(Argument.build_pattern('foobar'), '^\%(foobar\)')
    End
  End

  Describe .strip_quotes()
    It strip quotes when necessary
      Assert Equals(Argument.strip_quotes('"foo foo"'), 'foo foo')
      Assert Equals(Argument.strip_quotes("'foo foo'"), 'foo foo')
      Assert Equals(Argument.strip_quotes('foo foo'), 'foo foo')
      Assert Equals(Argument.strip_quotes('''foo foo"'), '''foo foo"')
      Assert Equals(Argument.strip_quotes('"foo foo'''), '"foo foo''')
    End
  End

  Describe .parse_term()
    It returns a corresponding [key, value] list for {term}
      Assert Equals(Argument.parse_term('A positional argument'), ['', 'A positional argument'])
      Assert Equals(Argument.parse_term('-f'), ['-f', 1])
      Assert Equals(Argument.parse_term('--foo'), ['--foo', 1])
      Assert Equals(Argument.parse_term('-fFOO'), ['-f', 'FOO'])
      Assert Equals(Argument.parse_term('--foo=FOO'), ['--foo', 'FOO'])
      Assert Equals(Argument.parse_term('-fF O O'), ['-f', 'F O O'])
      Assert Equals(Argument.parse_term('--foo=F O O'), ['--foo', 'F O O'])
      Assert Equals(Argument.parse_term('-f"F O O"'), ['-f', '"F O O"'])
      Assert Equals(Argument.parse_term('--foo="F O O"'), ['--foo', '"F O O"'])
      Assert Equals(Argument.parse_term('-f''F O O'''), ['-f', "'F O O'"])
      Assert Equals(Argument.parse_term('--foo=''F O O'''), ['--foo', "'F O O'"])
    End
  End

  Describe .build_term()
    It returns a corresponding term for [key, value]
      Assert Equals(Argument.build_term('', 'A positional argument'), 'A positional argument')
      Assert Equals(Argument.build_term('-f', 1), '-f')
      Assert Equals(Argument.build_term('--foo', 1), '--foo')
      Assert Equals(Argument.build_term('-f', 'FOO'), '-fFOO')
      Assert Equals(Argument.build_term('--foo', 'F O O'), '--foo=F O O')
    End
  End

  Context Instance
    Describe args
      Before
        let args = Argument.new([
              \ 'positional1:',
              \ '-1',
              \ '--optional1',
              \ 'positional2:foo',
              \ '-2foo',
              \ '--optional2=FOO',
              \ 'positional3:b a r',
              \ '-3b a r',
              \ '--optional3=B A R',
              \])
      End

      Describe .lock()
        It locks "raw"
          Assert Same(args.lock(), args)
          Throws /locked/ args.set('-f|--foo', 1)
          Throws /locked/ args.set_p(0, 'foo')
        End
      End

      Describe .clone()
        It returns a new cloned instance
          Assert Equals(args.clone(), args)
          Assert NotSame(args.clone(), args)
          Assert NotSame(args.clone(), args.clone())
        End

        It unlock "raw"
          call args.lock()
          let clone = args.clone()
          Throws /locked/ args.set('-f', 1)
          Assert Same(clone.set('-f', 1), clone)
        End
      End

      Describe .list()
        It returns a term list for optional arguments
          Assert Equals(args.list(), [
                \ '-1',
                \ '--optional1',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It ignores terms after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.list(), [
                \ '-1',
                \ '--optional1',
                \ '-2foo',
                \ '--optional2=FOO',
                \])
        End
      End

      Describe .search()
        It returns an index of a term for {query}
          Assert Equals(args.search('-1'), 1)
          Assert Equals(args.search('--optional1'), 2)
          Assert Equals(args.search('-1|--optional1'), 1)
          Assert Equals(args.search('-2|--optional2'), 4)
          Assert Equals(args.search('-3|--optional3'), 7)
        End

        It returns an index of a term for {query} from {start}
          Assert Equals(args.search('-1|--optional1', 2), 2)
          Assert Equals(args.search('-2|--optional2', 5), 5)
          Assert Equals(args.search('-3|--optional3', 8), 8)
        End

        It returns -1 if no term is found
          Assert Equals(args.search('-n|--not-found'), -1)
        End

        It returns -1 when reached to "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.search('-2|--optional2'), -1)
          Assert Equals(args.search('-3|--optional3'), -1)
        End
      End

      Describe .has()
        It returns 1 if a term for {query} exist
          Assert Equals(args.has('-1'), 1)
          Assert Equals(args.has('--optional1'), 1)
          Assert Equals(args.has('-1|--optional1'), 1)
          Assert Equals(args.has('-2|--optional2'), 1)
          Assert Equals(args.has('-3|--optional3'), 1)
        End

        It returns 0 if a term for {query} does not exist
          Assert Equals(args.has('-n'), 0)
          Assert Equals(args.has('--not-found'), 0)
          Assert Equals(args.has('-n|--not-found'), 0)
        End
      End

      Describe .get()
        It returns a value of a first term for {query}
          Assert Equals(args.get('-1'), 1)
          Assert Equals(args.get('--optional1'), 1)
          Assert Equals(args.get('-1|--optional1'), 1)
          Assert Equals(args.get('-2|--optional2'), 'foo')
          Assert Equals(args.get('-3|--optional3'), 'b a r')
        End

        It returns {default} if no term is found
          Assert Equals(args.get('-n|--not-found'), 0)
          Assert Equals(args.get('-n|--not-found', 0), 0)
          Assert Equals(args.get('-n|--not-found', ''), '')
        End
      End

      Describe .set()
        It sets a {value} to all terms for {query}
          Assert Same(args.set('-1|--optional1', 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1foobar',
                \ '--optional1=foobar',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])

          Assert Same(args.set('-2|--optional2', 1), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1foobar',
                \ '--optional1=foobar',
                \ 'positional2:foo',
                \ '-2',
                \ '--optional2',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It adds a term for {query} if missing
          Assert Same(args.set('-4|--optional4', 1), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '--optional4',
                \])

          Assert Same(args.set('-5|--optional5', 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '--optional4',
                \ '--optional5=foobar',
                \])
        End

        It removes all terms for {query} when {value} is 0
          Assert Same(args.set('-1|--optional1', 0), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .default()
        It does nothing when a term for {query} is found
          Assert Same(args.default('-1|--optional1', 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It adds a term for {query} if missing
          Assert Same(args.default('-4|--optional4', 1), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '--optional4',
                \])

          Assert Same(args.default('-5|--optional5', 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '--optional4',
                \ '--optional5=foobar',
                \])
        End

        It does nothing when {value} is 0
          Assert Same(args.default('-1|--optional1', 0), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])

          Assert Same(args.default('-4|--optional4', 0), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .pop()
        It returns a value of a first term and remove all terms for {query}
          Assert Equals(args.pop('-1|--optional1'), 1)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It returns {default} if no term is found
          Assert Equals(args.pop('-n|--not-found', 0), 0)
          Assert Equals(args.pop('-n|--not-found', ''), '')
        End
      End

      Describe .apply()
        Before
          function! s:fn(k, v) abort
            return [a:k, toupper(a:v) . 'L']
          endfunction
          let Fn = function('s:fn')
        End

        It calls {expr} on all terms for {query} and return a value of the first term (Funcref)
          Assert Equal(
                \ args.apply('-2|--optional2', Fn),
                \ 'FOOL',
                \)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2FOOL',
                \ '--optional2=FOOL',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It returns {default} if no term is found
          Assert Equal(
                \ args.apply('-n|--not-found', Fn, 'FOOBAR'),
                \ 'FOOBAR',
                \)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .map()
        Before
          function! s:fn(k, v) abort
            return [toupper(a:k), a:v]
          endfunction
          let Fn = function('s:fn')
        End

        It calls {expr} on all terms for optional arguments
          Assert Same(args.map(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--OPTIONAL1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--OPTIONAL2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--OPTIONAL3=B A R',
                \])
        End

        It ignores optional arguments after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.map(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--OPTIONAL1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .filter()
        Before
          function! s:fn(k, v) abort
            return a:k =~# '2'
          endfunction
          let Fn = function('s:fn')
        End

        It calls {expr} on all terms for optional arguments and remove
          Assert Same(args.filter(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \])
        End

        It ignores optional arguments after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.filter(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .list_p()
        It returns a term list for optional arguments
          Assert Equals(args.list_p(), [
              \ 'positional1:',
              \ 'positional2:foo',
              \ 'positional3:b a r',
                \])
        End

        It ignores terms after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.list_p(), [
                \ 'positional1:',
                \ 'positional2:foo',
                \])
        End
      End

      Describe .search_p()
        It returns an index of a positional {nth} term
          Assert Equals(args.search_p(0), 0)
          Assert Equals(args.search_p(1), 3)
          Assert Equals(args.search_p(2), 6)
        End

        It returns an index of a term for {query} from {start}
          Assert Equals(args.search_p(0, 1), 3)
          Assert Equals(args.search_p(1, 1), 6)
          Assert Equals(args.search_p(0, 4), 6)
        End

        It returns -1 if no term is found
          Assert Equals(args.search_p(3), -1)
        End
      End

      Describe .has_p()
        It returns 1 if a {nth} positional term exist
          Assert Equals(args.has_p(0), 1)
          Assert Equals(args.has_p(1), 1)
          Assert Equals(args.has_p(2), 1)
        End

        It returns 0 if a {nth} positional term does not exist
          Assert Equals(args.has_p(3), 0)
        End
      End

      Describe .get_p()
        It returns a value of a positional {nth} term
          Assert Equals(args.get_p(0), 'positional1:')
          Assert Equals(args.get_p(1), 'positional2:foo')
          Assert Equals(args.get_p(2), 'positional3:b a r')
        End

        It returns {default} if no term is found
          Assert Equals(args.get_p(3), '')
          Assert Equals(args.get_p(3, 0), 0)
          Assert Equals(args.get_p(3, ''), '')
        End
      End

      Describe .set_p()
        It sets a {value} at a positional {nth} term
          Assert Same(args.set_p(1, 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'foobar',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It adds empty terms if the number of positional argument is not enough
          Assert Same(args.set_p(5, 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '',
                \ '',
                \ 'foobar',
                \])
        End

        It removes a positional {nth} term when {value} is 0
          Assert Same(args.set_p(1, 0), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .default_p()
        It does nothing when a {nth} positional term is found
          Assert Same(args.default_p(1, 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It adds empty terms if the number of positional argument is not enough
          Assert Same(args.default_p(5, 'foobar'), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \ '',
                \ '',
                \ 'foobar',
                \])
        End

        It does nothing when {value} is 0
          Assert Same(args.default_p(1, 0), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .pop_p()
        It returns a value of a positional {nth} term and remove
          Assert Equals(args.pop_p(0), 'positional1:')
          Assert Equals(args.raw, [
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.pop_p(0), 'positional2:foo')
          Assert Equals(args.raw, [
                \ '-1',
                \ '--optional1',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.pop_p(0), 'positional3:b a r')
          Assert Equals(args.raw, [
                \ '-1',
                \ '--optional1',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It returns {default} if no term is found
          Assert Equals(args.pop_p(3), '')
          Assert Equals(args.pop_p(3, 0), 0)
          Assert Equals(args.pop_p(3, ''), '')
        End
      End

      Describe .apply_p()
        Before
          let Fn = function('toupper')
        End

        It calls {expr} on a {nth} positional term (Funcref)
          Assert Equal(args.apply_p(1, Fn), 'POSITIONAL2:FOO')
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'POSITIONAL2:FOO',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It returns {default} if no term is found
          Assert Equal(args.apply_p(5, Fn, 'FOOBAR'), 'FOOBAR')
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .map_p()
        Before
          let Fn = function('toupper')
        End

        It calls {expr} on all terms for positional arguments
          Assert Same(args.map_p(Fn), args)
          Assert Equals(args.raw, [
                \ 'POSITIONAL1:',
                \ '-1',
                \ '--optional1',
                \ 'POSITIONAL2:FOO',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'POSITIONAL3:B A R',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It ignores optional arguments after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.map_p(Fn), args)
          Assert Equals(args.raw, [
                \ 'POSITIONAL1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .filter_p()
        Before
          function! s:fn(value) abort
            return a:value =~# '2'
          endfunction
          let Fn = function('s:fn')
        End

        It calls {expr} on all terms for positional arguments and remove
          Assert Same(args.filter_p(Fn), args)
          Assert Equals(args.raw, [
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End

        It ignores optional arguments after "--"
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.filter_p(Fn), args)
          Assert Equals(args.raw, [
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .list_r()
        It returns a term list for residual arguments
          Assert Equals(args.list_r(), [])

          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Equals(args.list_r(), [
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
        End
      End

      Describe .map_r()
        Before
          let Fn = function('toupper')
        End

        It calls {expr} on all terms for residual arguments
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.map_r(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ '--',
                \ 'POSITIONAL3:B A R',
                \ '-3B A R',
                \ '--OPTIONAL3=B A R',
                \])
        End
      End

      Describe .filter_r()
        Before
          function! s:fn(value) abort
            return a:value =~# 'tion'
          endfunction
          let Fn = function('s:fn')
        End

        It calls {expr} on all terms for residual arguments and remove
          let args = Argument.new([
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '-2foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '-3b a r',
                \ '--optional3=B A R',
                \])
          Assert Same(args.filter_r(Fn), args)
          Assert Equals(args.raw, [
                \ 'positional1:',
                \ '-1',
                \ '--optional1',
                \ '--',
                \ 'positional2:foo',
                \ '--optional2=FOO',
                \ 'positional3:b a r',
                \ '--optional3=B A R',
                \])
        End
      End
    End
  End
End
